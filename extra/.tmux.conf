set-option -g default-terminal "tmux-256color"
set-option -as terminal-features ',*:RGB'

set -g mode-keys vi
set -g status-keys vi
set -g base-index 1
set -g pane-base-index 1
set -g mouse on

# bind C-h select-pane -L
# bind C-j select-pane -D
# bind C-k select-pane -U
# bind C-l select-pane -R

bind-key -T copy-mode-vi y send-keys -X copy-pipe "xclip -selection clipboard" ## macos: "reattach-to-user-namespace pbcopy"

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'

# CC: not needed anymore!
# https://github.com/microsoft/WSL/issues/5931#issuecomment-1288366222
# set -sg escape-time 1

set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @resurrect-strategy-nvim 'session'
set -g @resurrect-capture-pane-contents 'on'

#############################################################################################

# '@pane-is-vim' is a pane-local option that is set by the plugin on load,
# and unset when Neovim exits or suspends; note that this means you'll probably
# not want to lazy-load smart-splits.nvim, as the variable won't be set until
# the plugin is loaded

# CC: the `#{?@pane-is-vim,1,0}` part is because when `@pane-is-vim` is not
# set, it is empty/undefined, and for some reason, the `&&` doesn't work properly

# CC: these work with the prefix in any context
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# CC: these extra conditionals are for disabling the smart pane switching when
# we're running pwsh via WSL. The `@pwsh_command` value was obtained with
# `display-message "#{pane_current_command}"` in tmux. I'm not use why it's not
# `pwsh.exe` but it works
set-option -g @pwsh_command "init"

# Smart pane switching with awareness of Neovim splits.
bind-key -n C-h if -F "#{@pane-is-vim}" 'send-keys C-h' \
    "if -F '#{==:#{pane_current_command},#{@pwsh_command}}' 'send-keys C-h' 'select-pane -L'"
bind-key -n C-j if -F "#{@pane-is-vim}" 'send-keys C-j' \
    "if -F '#{==:#{pane_current_command},#{@pwsh_command}}' 'send-keys C-j' 'select-pane -D'"
bind-key -n C-k if -F "#{@pane-is-vim}" 'send-keys C-k' \
    "if -F '#{==:#{pane_current_command},#{@pwsh_command}}' 'send-keys C-k' 'select-pane -U'"
bind-key -n C-l if -F "#{@pane-is-vim}" 'send-keys C-l' \
    "if -F '#{==:#{pane_current_command},#{@pwsh_command}}' 'send-keys C-l' 'select-pane -R'"

# Smart pane resizing with awareness of Neovim splits.
bind-key -n M-h if -F "#{@pane-is-vim}" 'send-keys M-h' \
    "if -F '#{==:#{pane_current_command},#{@pwsh_command}}' 'send-keys M-h' 'resize-pane -L 3'"
bind-key -n M-j if -F "#{@pane-is-vim}" 'send-keys M-j' \
    "if -F '#{==:#{pane_current_command},#{@pwsh_command}}' 'send-keys M-j' 'resize-pane -D 3'"
bind-key -n M-k if -F "#{@pane-is-vim}" 'send-keys M-k' \
    "if -F '#{==:#{pane_current_command},#{@pwsh_command}}' 'send-keys M-k' 'resize-pane -U 3'"
bind-key -n M-l if -F "#{@pane-is-vim}" 'send-keys M-l' \
    "if -F '#{==:#{pane_current_command},#{@pwsh_command}}' 'send-keys M-l' 'resize-pane -R 3'"

# tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
# if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
#     "bind-key -n 'C-\\' if -F \"#{@pane-is-vim}\" 'send-keys C-\\'  'select-pane -l'"
# if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
#     "bind-key -n 'C-\\' if -F \"#{@pane-is-vim}\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
# bind-key -T copy-mode-vi 'C-\' select-pane -l # '"" # <-- CC: fix the syntax highlighting

#############################################################################################

set -g @plugin 'catppuccin/tmux'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
